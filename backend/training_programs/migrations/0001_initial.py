# Generated by Django 5.2.5 on 2025-09-14 11:58

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='TrainingProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500)),
                ('description', models.TextField(help_text='Detailed description of the training program')),
                ('type', models.CharField(choices=[('Conference', 'Conference'), ('Workshop', 'Workshop'), ('Fellowship', 'Fellowship'), ('Online Course', 'Online Course'), ('Masterclass', 'Masterclass')], default='Conference', max_length=20)),
                ('category', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('Published', 'Published'), ('Archived', 'Archived')], default='Draft', max_length=20)),
                ('is_featured', models.BooleanField(default=False, help_text='Feature this program prominently')),
                ('duration', models.CharField(help_text="e.g., '2 days', '1 week', '3 months'", max_length=100)),
                ('format', models.CharField(choices=[('In-person', 'In-person'), ('Virtual', 'Virtual'), ('Hybrid', 'Hybrid')], default='In-person', max_length=20)),
                ('location', models.CharField(help_text="Physical location or 'Online' for virtual programs", max_length=200)),
                ('timezone', models.CharField(default='GMT', max_length=50)),
                ('language', models.CharField(default='English', max_length=50)),
                ('max_participants', models.PositiveIntegerField(default=50, help_text='Maximum number of participants', validators=[django.core.validators.MinValueValidator(1)])),
                ('current_enrollments', models.PositiveIntegerField(default=0)),
                ('instructor', models.CharField(max_length=200)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('registration_deadline', models.DateField()),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('currency', models.CharField(choices=[('USD', 'USD'), ('EUR', 'EUR'), ('GBP', 'GBP'), ('KES', 'KES'), ('NGN', 'NGN'), ('ZAR', 'ZAR')], default='USD', max_length=3)),
                ('image', models.ImageField(blank=True, null=True, upload_to='training_programs/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'gif', 'webp'])])),
                ('image_url', models.URLField(blank=True, null=True)),
                ('prerequisites', models.JSONField(default=list, help_text='List of prerequisites')),
                ('learning_outcomes', models.JSONField(default=list, help_text='Expected learning outcomes')),
                ('topics', models.JSONField(default=list, help_text='Main topics covered')),
                ('target_audience', models.JSONField(default=list, help_text='Target audience categories')),
                ('materials', models.JSONField(default=list, help_text='Required materials or resources')),
                ('certificate_type', models.CharField(default='CME Certificate', help_text='Type of certificate awarded', max_length=100)),
                ('cme_credits', models.PositiveIntegerField(default=0, help_text='CME credits awarded', validators=[django.core.validators.MaxValueValidator(100)])),
                ('assessment_method', models.CharField(choices=[('None', 'None'), ('Quiz', 'Quiz'), ('Assignment', 'Assignment'), ('Presentation', 'Presentation'), ('Practical', 'Practical Exam'), ('Combined', 'Combined Assessment')], default='None', max_length=20)),
                ('passing_score', models.PositiveIntegerField(blank=True, help_text='Minimum passing score percentage', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['status'], name='training_pr_status_22dc27_idx'), models.Index(fields=['type'], name='training_pr_type_ec7acd_idx'), models.Index(fields=['category'], name='training_pr_categor_ed5925_idx'), models.Index(fields=['is_featured'], name='training_pr_is_feat_efc75b_idx'), models.Index(fields=['start_date'], name='training_pr_start_d_2790bb_idx'), models.Index(fields=['-created_at'], name='training_pr_created_898a60_idx')],
            },
        ),
        migrations.CreateModel(
            name='Speaker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('title', models.CharField(help_text='Professional title', max_length=200)),
                ('organization', models.CharField(max_length=200)),
                ('bio', models.TextField(help_text='Brief biography')),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='speakers', to='training_programs.trainingprogram')),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['program'], name='training_pr_program_6e5ef1_idx'), models.Index(fields=['name'], name='training_pr_name_77ba29_idx')],
            },
        ),
        migrations.CreateModel(
            name='ScheduleItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(help_text="e.g., 'Day 1', 'Monday', '2024-01-15'", max_length=50)),
                ('time', models.CharField(help_text="e.g., '09:00-10:00', '2:00 PM - 3:00 PM'", max_length=50)),
                ('activity', models.CharField(help_text='Activity or session title', max_length=200)),
                ('speaker', models.CharField(blank=True, help_text='Speaker or facilitator name', max_length=200)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedule', to='training_programs.trainingprogram')),
            ],
            options={
                'ordering': ['day', 'time'],
                'indexes': [models.Index(fields=['program', 'day'], name='training_pr_program_47b8b7_idx')],
            },
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('participant_name', models.CharField(max_length=200)),
                ('participant_email', models.EmailField(max_length=254)),
                ('participant_phone', models.CharField(max_length=20)),
                ('organization', models.CharField(max_length=200)),
                ('profession', models.CharField(max_length=100)),
                ('experience', models.CharField(choices=[('Entry Level', 'Entry Level'), ('Mid Level', 'Mid Level'), ('Senior Level', 'Senior Level'), ('Expert', 'Expert')], default='Mid Level', max_length=20)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Confirmed', 'Confirmed'), ('Waitlisted', 'Waitlisted'), ('Cancelled', 'Cancelled')], default='Pending', max_length=20)),
                ('payment_status', models.CharField(choices=[('Pending', 'Pending'), ('Paid', 'Paid'), ('Refunded', 'Refunded')], default='Pending', max_length=20)),
                ('special_requests', models.TextField(blank=True, help_text='Any special requests or requirements')),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registrations', to='training_programs.trainingprogram')),
            ],
            options={
                'ordering': ['-registration_date'],
                'indexes': [models.Index(fields=['program'], name='training_pr_program_4c71fe_idx'), models.Index(fields=['status'], name='training_pr_status_4bbeb9_idx'), models.Index(fields=['payment_status'], name='training_pr_payment_5e0268_idx'), models.Index(fields=['-registration_date'], name='training_pr_registr_e0afd9_idx')],
                'unique_together': {('program', 'participant_email')},
            },
        ),
    ]
